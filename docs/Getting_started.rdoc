= \Datadog Trace Client

_ddtrace_ is Datadog’s tracing client for Ruby. It is used to trace requests as they flow across web servers,
databases and microservices so that developers have great visiblity into bottlenecks and troublesome requests.

== Supported version

The \Datadog Trace Client supports the following Ruby versions:

* Ruby MRI 2.1
* Ruby MRI 2.2
* Ruby MRI 2.3

== Installation

Install the tracer with the +gem+ command, but point to Datadog's gems repository:

    $ gem install ddtrace --source http://gems.datadoghq.com/

On the other hand, if you're using +Bundler+, just update your +Gemfile+ as follows:

    source 'https://rubygems.org'

    # tracing gem
    gem 'ddtrace', :source => 'http://gems.datadoghq.com/'

== Quickstart

Adding tracing to your code is very simple. As an example, let’s imagine we have a web server and we want
to trace requests to the home page:

    require 'sinatra'
    require 'activerecord'

    require 'ddtrace/tracer'

    # your generic tracer
    tracer = Datadog::Tracer.new

    get '/' do
      tracer.trace('web.request') do |span|
        # set some span metadata
        span.service = 'my-web-site'
        span.resource = '/'
        span.set_tag('http.method', request.request_method)

        # trace the activerecord call
        tracer.trace('posts.fetch') do
          @posts = Posts.order(created_at: :desc).limit(10)
        end

        # trace the template rendering
        tracer.trace('template.render') do
          erb :index
        end
      end
    end

== Glossary

=== Service

The name of a set of processes that do the same job. Some examples are +datadog-web-app+ or +datadog-metrics-db+.

=== Resource

A particular query to a service. For a web application, some examples might be a URL stem like +/user/home+ or a
handler function like +web.user.home+. For a SQL database, a resource would be the SQL of the query itself like
+select * from users where id = ?+.

You can track thousands (not millions or billions) of unique resources per services, so prefer resources like
+/user/home+ rather than +/user/home?id=123456789+.

=== App

The name of the code that a service is running. Some common open source examples are +postgres+, +rails+ or +redis+.
If it’s running custom code, name it accordingly like +datadog-metrics-db+.

=== Span

A span tracks a unit of work in a service, like querying a database or rendering a template. Spans are associated
with a service and optionally a resource. Spans have names, start times, durations and optional tags.

== Integrations

=== Ruby on \Rails

The \Rails integration will trace requests, database calls, templates rendering and cache read/write/delete
operations. The integration makes use of the Active Support Instrumentation, listening to the Notification API
so that any operation instrumented by the API is traced.

The supported versions are:

* Rails 3.2
* Rails 4.2
* Rails 5.0

If you're using \Rails 3 or higher, the auto-instrumentation will be automatically activated, causing +ddtrace+
to be required during the application startup process. If you're not using +Bundler+, it's enough to require
+ddtrace+ after the \Rails bootstrap process. A good place to load the auto-instrumentation is an initializer
inside the +config/initializers+ folder.

All tracing settings are namespaced under the +Rails.configuration.datadog_tracer+ hash and in your application
config you can override the following defaults:

    Rails.configuration.datadog_trace = {
       enabled: true,
       auto_instrument: true,
       default_service: 'rails-app',
       template_base_path: 'views/',
       tracer: Datadog::Tracer.new()
    }

The available settings are:

* +enabled+: defines if the +tracer+ is enabled or not. If set to +false+, the code may be still instrumented
  but no +span+s are sent to the local trace agent.
* +auto_instrument+: if set to false the code will not be instrumented, while the +tracer+ may be active for
  your internal usage. This could be useful if you want to use the \Rails integration, but you want to trace
  only particular functions or views
* +default_service+: set the service name used by the tracer. Usually this configuration must be updated with
  a meaningful name
* +template_base_path+: used when the template name is parsed in the auto instrumented code. If you don't store
  your templates in the +views/+ folder, you may need to change this value
* +tracer+: is the global tracer used by the tracing application. Usually you don't need to change that value
  unless you're already using a different initialized +tracer+ somewhere else

If you need to instrument custom code within your controllers, you can simply:

    class CustomController < ApplicationController
      def index
        # if you use auto instrumentation, these calls are already traced
        @values = SomeModel.all
        @counter = Rails.cache.fetch('custom_cache_key')

        # you may want to instrument this code
        tracer.trace('custom.service') do
          data = Something::fetch_data()
          @objects = Something::parse_data(data)
        end
      end
    end

With the auto instrumentation turned on, the result trace will include your span correctly nested under the
+rails.request+ span.
