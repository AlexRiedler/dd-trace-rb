= \Datadog Trace Client

_ddtrace_ is Datadog’s tracing client for Ruby. It is used to trace requests as they flow across web servers,
databases and microservices so that developers have great visiblity into bottlenecks and troublesome requests.

== Installation

Install the tracer with the +gem+ command, but point to Datadog's gems repository:

    $ gem install ddtrace --source http://gems.datadoghq.com/trace/

On the other hand, if you're using +Bundler+, just update your +Gemfile+ as follows:

    source 'https://rubygems.org'

    # tracing gem
    gem 'ddtrace', :source => 'http://gems.datadoghq.com/trace/'

== Quickstart (Auto Instrumentation)

If you are on a {supported integration}[#label-Integrations], you should be able to generate traffic and view
metrics in your {dashboard}[https://app.datadoghq.com/trace].

== Quickstart (Manual Instrumentation)

If you aren't using a supported framework instrumentation, you may want to to manually instrument your code.
Adding tracing to your code is very simple. As an example, let’s imagine we have a web server and we want
to trace requests to the home page:

    require 'ddtrace'
    require 'sinatra'
    require 'activerecord'

    # a generic tracer that you can use across your application
    tracer = Datadog.tracer

    get '/' do
      tracer.trace('web.request') do |span|
        # set some span metadata
        span.service = 'my-web-site'
        span.resource = '/'
        span.set_tag('http.method', request.request_method)

        # trace the activerecord call
        tracer.trace('posts.fetch') do
          @posts = Posts.order(created_at: :desc).limit(10)
        end

        # trace the template rendering
        tracer.trace('template.render') do
          erb :index
        end
      end
    end

== Glossary

[Service] The name of a set of processes that do the same job. Some examples are +datadog-web-app+ or +datadog-metrics-db+.

[Resource] A particular query to a service. For a web application, some examples might be a URL stem like +/user/home+ or a
           handler function like +web.user.home+. For a SQL database, a resource would be the SQL of the query itself like
           <tt>select * from users where id = ?</tt>.
           You can track thousands (not millions or billions) of unique resources per services, so prefer resources like
           +/user/home+ rather than <tt>/user/home?id=123456789</tt>.

[Span] A span tracks a unit of work in a service, like querying a database or rendering a template. Spans are associated
       with a service and optionally a resource. Spans have names, start times, durations and optional tags.

== Integrations

=== Ruby on \Rails

The \Rails integration will trace requests, database calls, templates rendering and cache read/write/delete
operations. The integration makes use of the Active Support Instrumentation, listening to the Notification API
so that any operation instrumented by the API is traced.

The supported versions are:

* \Rails 3.2 (MRI interpreter, JRuby is experimental)
* \Rails 4.2 (MRI interpreter, JRuby is experimental)
* \Rails 5.0 (MRI interpreter)

The currently supported web server are:
* Puma 2.16+ and 3.6+
* Unicorn 4.8+ and 5.1+
* Passenger 5.0 (experimental)

==== Installation

Add the tracer gem to your +Gemfile+:

    gem 'ddtrace', :source => 'http://gems.datadoghq.com/trace/'

Now you can set your service name, simply creating an initializer file in your +config/+ folder:

    # config/initializers/datadog-tracer.rb

    Rails.configuration.datadog_trace = {
      default_service: 'my-rails-app',
    }

If you're using \Rails 3 or higher, the auto-instrumentation will be automatically activated and no more configuration
is required. Your application will be listed as +my-rails-app+ in your {dashboard}[https://app.datadoghq.com/trace].

==== Custom Instrumentation

If you need to instrument custom code within your controllers, you can simply:

    class CustomController < ApplicationController
      def index
        # using auto instrumentation, these calls are already traced
        @values = SomeModel.all
        @counter = Rails.cache.fetch('custom_cache_key')

        # use the global tracer to instrument your code
        tracer = Datadog.tracer
        tracer.trace('custom.service') do
          data = Something::fetch_data()
          @objects = Something::parse_data(data)
        end
      end
    end

With the auto instrumentation turned on, the result trace will include your span correctly nested under the
+rails.request+ span.

==== Tracer Configuration

All tracing settings are namespaced under the +Rails.configuration.datadog_tracer+ hash. To change the default behavior
of the Datadog tracer, you can override the following defaults:

    # config/initializers/datadog-tracer.rb

    Rails.configuration.datadog_trace = {
      enabled: true,
      auto_instrument: true,
      default_service: 'rails-app',
      template_base_path: 'views/',
      tracer: Datadog.tracer
    }

The available settings are:

* +enabled+: defines if the +tracer+ is enabled or not. If set to +false+, the code is still instrumented
  but no spans are sent to the local trace agent.
* +auto_instrument+: if set to false the code will not be instrumented, while the +tracer+ may be active for
  your internal usage. This could be useful if you want to use the \Rails integration, but you want to trace
  only particular functions or views
* +default_service+: set the service name used by the tracer. Usually this configuration must be updated with
  a meaningful name
* +default_database_service+: set the database service name used by the tracer. By default the tracer uses the
  configured adapter name, so if you're using PostgreSQL it will be simply +postgres+.
* +template_base_path+: used when the template name is parsed in the auto instrumented code. If you don't store
  your templates in the +views/+ folder, you may need to change this value
* +tracer+: is the global tracer used by the tracing application. Usually you don't need to change that value
  unless you're already using a different initialized +tracer+ somewhere else

== Debug Mode

If you need to check locally what traces and spans are sent after each traced block, you can enable
a global debug mode for all tracers so that every time a trace is ready to be sent, the content will be
printed in the +STDOUT+. To enable the debug logging, add this code anywhere before using the tracer
for the first time:

    require 'ddtrace'
    require 'sinatra'
    require 'activerecord'

    # enable debug mode
    Datadog::Tracer.debug_logging = true

    # use the tracer as usual
    tracer = Datadog.tracer

    get '/' do
      tracer.trace('web.request') do |span|
        # ...
      end
    end

Remember that the debug mode may affect your application performance and so it must not be used
in a production environment.

== Supported Versions

The \Datadog Trace Client has been tested with the following Ruby versions:

* Ruby MRI 2.1
* Ruby MRI 2.2
* Ruby MRI 2.3
* JRuby 9.1.5 (experimental)

Other versions aren't yet officially supported.
